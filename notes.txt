03/28/23
  after creating the folder
    create a package.json file: npm init -y
    install openAI: npm install openai
    we need to install dot EnV package, we wil use it to create a DOT EnV file which will store our openAI api key. We do not want to store the key in our node code directly. It is a matter of security.
      install dot EnV: npm install dotenv --save
    create index.js and env: 

    In the env file:
      we have to bring in an environment variable: OPENAI_API_KEY="";

 03/29/23
   ok... I could not get the apikey to work. I kept getting an error: Invalid api key. After some troubleshooting:
     OPENAI_API_KEY="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";
     OPENAI_API_KEY=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 NOTE*** these api keys has been changed!!!

     the second one was correct. I had the ";" at the end of the key and it was adding that as the key. I found this out by just adding the key directly to the code instead of using the .env file.
     I have the prompt working in the cmd prompt. I just need to fix this error with the "require" so I can use the console on the browser.

    Use a bundler like webpack or parcel
      npm install -g parcel-bundler
    
    Ok. so I shouldnt make api calls to OpenAI directly -or anything directly- from the client side browser. It is not recommended. It will expose your api key. I need to make the api call from a server side
    environment -my computer- nodejs. I have to create a server.js -a node server- use a library -express- to handle the api call. Then use the client side JS to display the results.
     install express: npm install express

03/30/23
  also installed: cors and nodemon. Went back to the "coding with kevin" project to help me out.
  so I ran into some minor coding issues that I should not of had a problem with. but I kind of did this tutorial a little sloppy so I was all over the place.
  In summary:
    openaiApi.js
      this API utility file handles communication with the OpenAI API. This file is responsible fro setting up the OpenAI API configuration, defining the "runCompletion" function and exporting the function so that it can be used by other
      parts of your application. The asynchronous function has an asynchronous operation that makes a request to the openAI API with the specified arguments.
    build the server
      the server has an asynchronous route handler: app.post. it used to be a get route where I could use the browser to access the url: http://localhost:5000 and see the data from the openaiApi.js file, but you can only access get routes
      in this mannor, not post routes. The post route: its primary function is to handle data sent by your client-side application, process it and send back a response.
      the route handler accepts an argument in the form of a question from the client side code and passes it in to the runCompletion() function, which returns a value in the form fo the response from openai.
    fetchDataFromSerer.js
      this utility file is responsible for fetching the data from the server.js file. The function in the file has an HTTP Post request operation using fetch API.
    app.js
      the app.js file is responsible for client side code which renders the form on the browser.
      When the submit button is clicked the question is passed as an argument to the fetchDataFromServer function, which uses the HTTP Post resquest to pass the question to the router handler in server.js. The rourte
      handler passes the argument -question- to the runCompletion() funciton in the API utility file operAPI.js where it is processsed thru openAI. Which gets returned back to the app.js file and renders to the browser
      so basically:
        app.js > fetchDataFromSerer.js > server.js > openaiApi.js



04/03/23
  My response was coming back false. I had to sign up for billing.

04/11/23
  Im ready to deploy this on git hub pages, but just a quick summary since my last note^:
    created displayData.js to display the ui. and to do some text to speach.
    I finally had to do some security fixes with the .env file.

  I have my project published. Good. but I have some hierarchy issues. I dont think I need to reconfigure my hierarchy, but I am going to:
    I relocated my utils directory inside my src directory and I had some issues with the path in the openaiApi.js file. I guess the syntax of the path stays the same no matter where I move the file

  I'm making a dist folder to try to understand the build process.
    without a build process in place, your client-side code will be served directly, without any compilation, minification, or bundling. This approach migh be sufficient for simple prosjects with plain html, css,
    and Js projects, but for bigger projects it could lead to compatibility issues.

    setup a build process using webpack. install webpack and its dependecies: npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin
    create a webpack.config.js file in the root directory and configure it: This configuration sets up a simple build process for your project. It bundles your JS files, transpiles modern JS syntax for better
    browser compatibility, and automatically injects the bundled JS file into your "index.html"

    install Babel its dependecies to transpile modern JS syntax for better browser compatibility: npm install --save-dev @babel/core @babel/preset-env babel-loader
    04/12/23
    The website is not functioning properly when accessd from another machine. It works fine on my machine where I have my project open. I am not sure if it's realted to not having a build process. Im going to 
    continue with this build process and see if that is the issue.
    -from installing Babel.....
      update package.json
        "scripts": {
          "build": "NODE_ENV=production webpack"
          "build": "webpack",
          "start-client": "webpack serve",
          "start-server": "nodemon server.js",
          "test": "echo \"Error: no test specified\" && exit 1"
        }

        had a warning: The mode option has not been set. Setting the mode helps Webpack apply the appropriate optimizations and settings for the specified environment.
          added in webpack.config.js
            mode: process.env.NODE_ENV === "production" ? "production" : "development",
          added in package.json
            "build:" "NODE_ENV=production webpack"
              the warining went away but when i run build I am getting: "NODE_ENV" is not recognized as an internal or external command,
                so the syntax only works with unix based systems (macOs and linux). I had to: npm install --save-dev cross-env and add to the "build":
                  "build": "cross-env NODE_ENV=production webpack"
                  

          

    